// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init



generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id  String  @id @default(uuid()) @unique
  name String?
  email String  @unique
  password String

  workflows Workflow[]
  credentials Credential[]
  authTokens AuthToken[]
}

model Workflow {
  id   String @id @default(uuid())
  name String
  description String?
  active Boolean

  userId String
  user User @relation(fields: [userId], references: [id])

  nodes Json
  connections Json

  webhooks Webhook[]
  executions Execution[]


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Webhook {
  id String @id @default(uuid())
  path String
  method String

  // headers Json?
  // token String?
  

  workflowId String
  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@unique([path, method])
}


model Credential {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  type      String
  data      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, name])
}

model AuthToken {
  id        String   @id @default(uuid())
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime

  userId String
  user   User   @relation(fields: [userId], references: [id])
}


model Execution {
  id          String   @id @default(uuid())
  workflowId  String
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  status      String   @default("PENDING") //PENDING, RUNNING, COMPLETED, FAILED
  trigger     String? // "manual", "webhook"
  triggerData Json? // To store the initial data from triggers like webhooks
  nodes       Json
  connections Json
  output      Json?
  error       String?

  startedAt   DateTime  @default(now())
  completedAt DateTime?

  logs ExecutionLog[]
}

model ExecutionLog {
  id String @id @default(uuid())

  execution   Execution @relation(fields: [executionId], references: [id], onDelete: Cascade)
  executionId String

  nodeId      String // The ID of the node from the `nodes` JSON
  nodeName    String // The name of the node for easier display
  status      ExecutionStatus
  inputData   Json?
  outputData  Json?
  error       String?
  
  timestamp DateTime @default(now())
}


enum ExecutionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
}

// model Node {
//   id String @id @default(uuid())
//   type NODE_TYPE //trigger or action

//   name String 
//   description String?

//   workflowId String
//   workflow Workflow @relation(fields: [workflowId], references: [id])

//   triggerKind TRIGGER_KIND?
//   actionKind ACTION_KIND?

//   positionX Float
//   positionY Float

// }

